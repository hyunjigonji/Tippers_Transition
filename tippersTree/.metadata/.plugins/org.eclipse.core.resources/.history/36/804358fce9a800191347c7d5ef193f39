package translation.ontology;
import java.io.File;
import java.lang.invoke.*;
import java.lang.invoke.StringConcatFactory;
import java.util.ArrayList;
import java.util.Set;
import java.util.TreeSet;

import org.eclipse.rdf4j.model.vocabulary.OWL;
import org.semanticweb.HermiT.Reasoner;
import org.semanticweb.owlapi.apibinding.OWLManager;
import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLAxiom;
import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLDataFactory;
import org.semanticweb.owlapi.model.OWLIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyCreationException;
import org.semanticweb.owlapi.model.OWLOntologyManager;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;
import org.semanticweb.owlapi.reasoner.OWLReasoner;
import org.semanticweb.owlapi.util.BidirectionalShortFormProvider;
import org.semanticweb.owlapi.util.BidirectionalShortFormProviderAdapter;
import org.semanticweb.owlapi.util.SimpleShortFormProvider;

import com.github.andrewoma.dexx.collection.List;

//import edu.uci.isg.mobipedia.parsing.HTMLParser;
import es.unizar.semantic.DLQueryEngine;

public class OntologyManager {

	public OWLOntologyManager manager;
	public OWLDataFactory factory;
	public OWLOntology ontology;
	public String ontologyURL = "C:\\Users\\KIM KI MIN\\Desktop\\research project\\ontology\\ontology.owl";
	public OWLReasoner reasoner;
	public DLQueryEngine queryEngine;

	public static IRI ontologyIRI = IRI
			.create("C:\\Users\\KIM KI MIN\\Desktop\\research project\\ontology\\ontology.owl");

	public BidirectionalShortFormProvider bidiShortFormProvider;

	public OntologyManager() {
		startOntologyManager();
	}

	public void startOntologyManager() {
		manager = OWLManager.createOWLOntologyManager();
		factory = OWLManager.getOWLDataFactory();

			
		System.out.println("Starting...");
		try {
			System.out.println("Loading ontology" + ontologyURL + "...");
			ontology = manager.loadOntologyFromOntologyDocument(new File(
					ontologyURL));

			reasoner = createOWLReasoner(ontology);

			queryEngine = createDLQueryEngine(reasoner);

			Set<OWLOntology> importsClosure = ontology.getImportsClosure();
			// Create a bidirectional short form provider to do the actual
			// mapping.
			// It will generate names using the input
			// short form provider.
			bidiShortFormProvider = new BidirectionalShortFormProviderAdapter(
					manager, importsClosure, queryEngine.getShortFormProvider());

		} catch (OWLOntologyCreationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * Creates a HermiT OWLReasoner with the given ontology.
	 * 
	 * @param OWLOntology
	 *            The ontology
	 * @return OWLReasoner The reasoner created
	 */
	public OWLReasoner createOWLReasoner(OWLOntology ontology)
			throws IllegalArgumentException {
		return new Reasoner(ontology);
	}

	/**
	 * Creates a query engine to process DL queries.
	 * 
	 * @param OWLOntology
	 *            The ontology
	 * @return DLQueryEngine The engine to process DL queries
	 */

	public DLQueryEngine createDLQueryEngine(OWLReasoner reasoner)
			throws IllegalArgumentException {
		if (reasoner == null) {
			throw new IllegalArgumentException("OWLReasoner is null");
		}
		return new DLQueryEngine(reasoner, new SimpleShortFormProvider());
	}
	
	/*

	public void saveOntology(String nameOntology) {
		// Now save a local copy of the ontology. (Specify a path appropriate to
		// your setup)

		File theDir = new File(HTMLParser.FOLDER_ONTOLOGIES);

		if (!theDir.exists()) {
			try {
				theDir.mkdir();
			} catch (SecurityException se) {
				// handle it
			}
		}

		File file = new File(theDir.getPath() + File.separator + nameOntology
				+ ".owl");
		try {
			manager.saveOntology(ontology, IRI.create(file.toURI()));
		} catch (OWLOntologyStorageException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		// TO CHANGE FORMAT (IF NEEDED)
		// // By default ontologies are saved in the format from which they were
		// // loaded. In this case the ontology was loaded from rdf/xml. We
		// // can get information about the format of an ontology from its
		// manager
		// OWLDocumentFormat format = manager.getOntologyFormat(ontology);
		// // We can save the ontology in a different format. Lets save the
		// // ontology
		// // in owl/xml format
		// OWLXMLDocumentFormat owlxmlFormat = new OWLXMLDocumentFormat();
		// // Some ontology formats support prefix names and prefix IRIs. In our
		// // case we loaded the Koala ontology from an rdf/xml format, which
		// // supports prefixes. When we save the ontology in the new format we
		// // will copy the prefixes over so that we have nicely abbreviated
		// IRIs
		// // in the new ontology document
		// if (format.isPrefixOWLOntologyFormat()) {
		// owlxmlFormat.copyPrefixesFrom(format.asPrefixOWLOntologyFormat());
		// }
		// manager.saveOntology(ontology, owlxmlFormat,
		// IRI.create(file.toURI()));
	}
	
	*/

	
	public void addAxiomsOntology(Set<OWLAxiom> axioms) {
		manager.addAxioms(ontology, axioms);
	}
	
}